{"version":3,"sources":["components/robotPicker.js","components/TicketForm.js","components/RobotInfo.js","components/App.js","index.js"],"names":["RobotPicker","react_default","a","createElement","className","React","Component","TicketForm","state","issue","handleChange","event","_this","setState","target","value","handleSubmit","preventDefault","databody","console","log","fetch","method","body","JSON","stringify","headers","Content-Type","then","res","json","data","catch","error","onEnterPress","key","shiftKey","onSubmit","this","type","placeholder","onChange","onKeyDown","RobotInfo","props","Name","Resin","Status","onClick","reserve","release","components_TicketForm","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","robots","i","length","alert","_this2","_this3","robotPicker","map","robot","components_RobotInfo","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.a99aa051.chunk.js","sourcesContent":["import React from 'react'\n\n\nclass RobotPicker extends React.Component {\n    render(){\n        return <div>\n            <h1 className=\"title\">Welcome! Choose a Robot to reserve by pressing the reserve button and when you're done release it for others to use.</h1>\n        </div>\n    \n    }\n}\n\nexport default RobotPicker;","import React from 'react'\n\n\n\n\nclass TicketForm extends React.Component {\n\n    state = {\n        issue: ''\n    }\n\n\n    handleChange = (event) => {\n        this.setState({ issue: event.target.value });\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        // if(!databody){\n        //     alert('please enter a problem')\n        // }\n\n        let databody = {\n            \"issue\": this.state.issue\n        };\n        console.log(databody)\n        fetch('http://localhost:4000/api/issues', {\n            method: 'POST',\n            body: JSON.stringify(databody),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        })\n            .then(res => res.json())\n            .then(data => console.log(data))\n            .catch(error => console.log('Error:', error));\n\n        this.setState({ issue: \"\" });\n\n    };\n\n    onEnterPress = (event) => {\n        if (event.key === 'Enter' && event.shiftKey === false) {\n            this.handleSubmit(event);\n        }\n\n    }\n\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <textarea type=\"text\" placeholder=\"Describe your problem\" onChange={this.handleChange} onKeyDown={this.onEnterPress} value={this.state.issue} />\n                <br></br>\n                <button type=\"submit\">Submit</button>\n            </form>\n        )\n    }\n};\nexport default TicketForm","import React from 'react';\nimport TicketForm from './TicketForm'\n\nclass RobotInfo extends React.Component {\n\n    \n\n    \n\n\n    render() {\n        return (\n            <div>\n                <h3>{this.props.Name}</h3>\n                <h3>{this.props.Resin}</h3>\n                <h3>{this.props.Status}</h3>\n                <button onClick={() => this.props.reserve(this.props.Name)}>Reserve</button>\n                <button onClick={() => this.props.release(this.props.Name)}>Release</button>\n                <TicketForm />\n            </div>\n        )\n    }\n}\n\nexport default RobotInfo;","import React, { Component } from 'react';\nimport RobotPicker from './robotPicker';\nimport RobotInfo from './RobotInfo'\n\n\n\nclass App extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            robots: []\n\n        }\n    }\n\n     //when I update the db I should refresh the data\n    //so when a robot is released or reserved the db is in sync with the user side\n    //only allow the person that reserved the robot to release\n    //if you didn't reserve the robot you shouldn't be able to release\n    //when a robot is reserved all users are notified\n    componentDidMount() {\n        fetch('https://robotbackend3.herokuapp.com/api/robots', {\n            method: 'Get',\n        })\n            .then(res => res.json())\n            .then(robots => {\n                this.setState({\n                    robots: robots\n                });\n                console.log(robots)\n            })\n            .catch(error => console.log('Error:', error));\n    }\n\n    reserve = Name => {\n        console.log('reserve called by', Name)\n\n        const robots = this.state.robots\n        for (let i = 0; i < robots.length; i++) {\n            if (Name === robots[i].Name) {\n                if (robots[i].Status === \"Reserved\") {\n                    alert('Sorry Already Taken')\n                } else {\n                    robots[i].Status = \"Reserved\"\n                    //only update the robot if it hasn't been taken\n                    fetch('https://robotbackend3.herokuapp.com/api/robots', {\n                        method: 'POST',\n                        body: JSON.stringify(robots[i]),\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                    })\n                        .then(res => res.json())\n                        .then(data => console.log(data))\n                        .catch(error => console.log('Error:', error));\n                };\n            }\n        }\n\n        this.setState({\n            robots: robots\n\n        })\n    }\n\n    release = Name => {\n        console.log('release called by', Name)\n        const robots = this.state.robots\n        for (let i = 0; i < robots.length; i++) {\n            if (Name === robots[i].Name) {\n                if (robots[i].Status === \"Available\") {\n                    alert('Sorry Already Free')\n                } else {\n                    robots[i].Status = \"Available\"\n                    fetch('https://robotbackend3.herokuapp.com/api/robots', {\n                        method: 'POST',\n                        body: JSON.stringify(robots[i]),\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                    })\n                        .then(res => res.json())\n                        .then(data => console.log(data))\n                        .catch(error => console.log('Error:', error));\n                }\n            }\n        }\n        this.setState({\n            robots: robots\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {/* <RobotPicker /> */}\n                <RobotPicker />\n                {this.state.robots.map(robot => <RobotInfo Name={robot.Name} Resin={robot.Resin} Status={robot.Status} reserve={this.reserve} release={this.release} key={robot.Name} />)}\n\n\n            </div>\n        )\n    }\n}\n\nexport default App","// let's go!\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport \"./css/keemstyle.css\"\nimport App from './components/App'\n\nrender(<App/>, document.getElementById('main'))\n// render(<RobotPicker/>, document.getElementById('main'))\n"],"sourceRoot":""}