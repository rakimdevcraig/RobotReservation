{"version":3,"sources":["components/robotPicker.js","components/TicketForm.js","components/RobotInfo.js","components/App.js","index.js"],"names":["RobotPicker","react_default","a","createElement","className","React","Component","TicketForm","state","issue","handleChange","event","_this","setState","target","value","handleSubmit","preventDefault","databody","console","log","fetch","method","body","JSON","stringify","headers","Content-Type","then","res","json","data","catch","error","onEnterPress","key","shiftKey","onSubmit","this","type","placeholder","onChange","onKeyDown","RobotInfo","props","Name","Resin","Status","onClick","reserve","release","components_TicketForm","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","robots","i","length","alert","_this2","_this3","robotPicker","map","robot","components_RobotInfo","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.be4482a9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nclass RobotPicker extends React.Component {\r\n    render(){\r\n        return <div>\r\n            <h1 className=\"title\">Welcome! Choose a Robot to reserve by pressing the reserve button and when you're done release it for others to use.</h1>\r\n        </div>\r\n    \r\n    }\r\n}\r\n\r\nexport default RobotPicker;","import React from 'react'\r\n\r\n\r\n\r\n\r\nclass TicketForm extends React.Component {\r\n\r\n    state = {\r\n        issue: ''\r\n    }\r\n\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ issue: event.target.value });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        // if(!databody){\r\n        //     alert('please enter a problem')\r\n        // }\r\n\r\n        let databody = {\r\n            \"issue\": this.state.issue\r\n        };\r\n        console.log(databody)\r\n        fetch('http://localhost:4000/api/issues', {\r\n            method: 'POST',\r\n            body: JSON.stringify(databody),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => console.log(data))\r\n            .catch(error => console.log('Error:', error));\r\n\r\n        this.setState({ issue: \"\" });\r\n\r\n    };\r\n\r\n    onEnterPress = (event) => {\r\n        if (event.key === 'Enter' && event.shiftKey === false) {\r\n            this.handleSubmit(event);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <textarea type=\"text\" placeholder=\"Describe your problem\" onChange={this.handleChange} onKeyDown={this.onEnterPress} value={this.state.issue} />\r\n                <br></br>\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        )\r\n    }\r\n};\r\nexport default TicketForm","import React from 'react';\r\nimport TicketForm from './TicketForm'\r\n\r\nclass RobotInfo extends React.Component {\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>{this.props.Name}</h3>\r\n                <h3>{this.props.Resin}</h3>\r\n                <h3>{this.props.Status}</h3>\r\n                <button onClick={() => this.props.reserve(this.props.Name)}>Reserve</button>\r\n                <button onClick={() => this.props.release(this.props.Name)}>Release</button>\r\n                <TicketForm />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RobotInfo;","import React, { Component } from 'react';\r\nimport RobotPicker from './robotPicker';\r\nimport RobotInfo from './RobotInfo'\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            robots: []\r\n\r\n        }\r\n    }\r\n\r\n     //when I update the db I should refresh the data\r\n    //so when a robot is released or reserved the db is in sync with the user side\r\n    //only allow the person that reserved the robot to release\r\n    //if you didn't reserve the robot you shouldn't be able to release\r\n    //when a robot is reserved all users are notified\r\n    componentDidMount() {\r\n        fetch('http://localhost:4000/api/robots', {\r\n            method: 'Get',\r\n        })\r\n            .then(res => res.json())\r\n            .then(robots => {\r\n                this.setState({\r\n                    robots: robots\r\n                });\r\n                console.log(robots)\r\n            })\r\n            .catch(error => console.log('Error:', error));\r\n    }\r\n\r\n    reserve = Name => {\r\n        console.log('reserve called by', Name)\r\n\r\n        const robots = this.state.robots\r\n        for (let i = 0; i < robots.length; i++) {\r\n            if (Name === robots[i].Name) {\r\n                if (robots[i].Status === \"Reserved\") {\r\n                    alert('Sorry Already Taken')\r\n                } else {\r\n                    robots[i].Status = \"Reserved\"\r\n                    //only update the robot if it hasn't been taken\r\n                    fetch('http://localhost:4000/api/robots', {\r\n                        method: 'POST',\r\n                        body: JSON.stringify(robots[i]),\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                    })\r\n                        .then(res => res.json())\r\n                        .then(data => console.log(data))\r\n                        .catch(error => console.log('Error:', error));\r\n                };\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            robots: robots\r\n\r\n        })\r\n    }\r\n\r\n    release = Name => {\r\n        console.log('release called by', Name)\r\n        const robots = this.state.robots\r\n        for (let i = 0; i < robots.length; i++) {\r\n            if (Name === robots[i].Name) {\r\n                if (robots[i].Status === \"Available\") {\r\n                    alert('Sorry Already Free')\r\n                } else {\r\n                    robots[i].Status = \"Available\"\r\n                    fetch('http://localhost:4000/api/robots', {\r\n                        method: 'POST',\r\n                        body: JSON.stringify(robots[i]),\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        },\r\n                    })\r\n                        .then(res => res.json())\r\n                        .then(data => console.log(data))\r\n                        .catch(error => console.log('Error:', error));\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            robots: robots\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <RobotPicker /> */}\r\n                <RobotPicker />\r\n                {this.state.robots.map(robot => <RobotInfo Name={robot.Name} Resin={robot.Resin} Status={robot.Status} reserve={this.reserve} release={this.release} key={robot.Name} />)}\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// let's go!\r\n\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport \"./css/keemstyle.css\"\r\nimport App from './components/App'\r\n\r\nrender(<App/>, document.getElementById('main'))\r\n// render(<RobotPicker/>, document.getElementById('main'))\r\n"],"sourceRoot":""}